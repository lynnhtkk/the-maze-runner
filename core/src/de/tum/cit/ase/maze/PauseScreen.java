package de.tum.cit.ase.maze;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.Screen;
import com.badlogic.gdx.files.FileHandle;
import com.badlogic.gdx.graphics.GL20;
import com.badlogic.gdx.graphics.OrthographicCamera;
import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.graphics.g2d.TextureRegion;
import com.badlogic.gdx.scenes.scene2d.Actor;
import com.badlogic.gdx.scenes.scene2d.Stage;
import com.badlogic.gdx.scenes.scene2d.ui.Image;
import com.badlogic.gdx.scenes.scene2d.ui.Label;
import com.badlogic.gdx.scenes.scene2d.ui.Table;
import com.badlogic.gdx.scenes.scene2d.ui.TextButton;
import com.badlogic.gdx.scenes.scene2d.utils.ChangeListener;
import com.badlogic.gdx.utils.Scaling;
import com.badlogic.gdx.utils.viewport.FillViewport;
import com.badlogic.gdx.utils.viewport.ScreenViewport;
import com.badlogic.gdx.utils.viewport.Viewport;
import games.spooky.gdx.nativefilechooser.NativeFileChooserCallback;
import games.spooky.gdx.nativefilechooser.NativeFileChooserConfiguration;

public class PauseScreen implements Screen {

    private MazeRunnerGame game;
    private OrthographicCamera camera;
    private Viewport viewport;
    private final Stage stage;
    private Texture backgroundTexture;

    public PauseScreen(MazeRunnerGame game) {
        this.game = game;
        camera = new OrthographicCamera();
        viewport = new FillViewport(Gdx.graphics.getWidth() * 1.5f, Gdx.graphics.getHeight() * 1.5f, camera);
        stage = new Stage(viewport, game.getBatch());

        // add background
        addBackgroundImage();

        // add buttons
        addButtons();
    }

    /**
     * Renders the pause screen.
     * <p>
     * This method is an override of the render function used to draw the pause screen.
     * It primarily deals with rendering UI elements like buttons. The method clears the screen
     * and then updates and draws the stage, which contains the UI elements. The {@code stage.act}
     * method is called with a delta time, which updates the state of the UI elements.
     * Following this, {@code stage.draw} is used to render the UI elements on the screen.
     * This method ensures that the pause screen is appropriately updated and drawn at each frame refresh.
     * </p>
     *
     * @param delta The time span between the current and last frame in seconds, used for updating
     *              the stage's act method.
     */
    @Override
    public void render(float delta) {
        Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
        stage.act(Math.min(Gdx.graphics.getDeltaTime(), 1 / 30f));
        stage.draw();
    }

    /**
     * Adds a background image to the pause screen.
     * <p>
     * This method loads and sets a background image for the pause screen. The image is obtained
     * from the assets folder ("menu_screen_background.png"). The image is set to fill
     * the entire screen, ensuring that it covers the menu screen's full area.
     * </p>
     */
    private void addBackgroundImage() {
        backgroundTexture = new Texture(Gdx.files.internal("menu_screen_background.png"));      // the image is generated by an AI
        Image background = new Image(backgroundTexture);
        background.setName("background");
        background.setFillParent(true);
        background.setScaling(Scaling.fill);
        stage.addActor(background);
    }

    /**
     * Adds interactive buttons to the pause screen.
     * <p>
     * This method sets up and adds UI elements, particularly buttons, to the pause screen.
     * The buttons include:
     * <ul>
     *     <li>'Continue' button: Allows the player to continue playing the game from where he left off.</li>
     *     <li>'Restart' button: Restart the current map from initial state.</li>
     *     <li>'New Game' button: Allows the player to choose a different map file and start the game from initial state.
     *         This button triggers a file chooser for selecting the map and then transitions.</li>
     *     <li>'Go to Menu' button: Allows the player to go back to the menu screen.</li>
     * </ul>
     * The method also adds a label to inform the player what state the game is in. The buttons and label are organized
     * within a table layout for consistent and manageable positioning. Listeners are attached
     * to the buttons to handle the respective actions when they are clicked.
     * </p>
     *
     * @see NativeFileChooserConfiguration
     * @see NativeFileChooserCallback
     */
    private void addButtons() {
        // add table onto stage
        Table table = new Table();
        table.setFillParent(true);
        stage.addActor(table);

        // add title
        table.add(new Label("Pause Screen", game.getSkin(), "title")).padBottom(80).row();

        // set default padding for buttons
        table.defaults().padBottom(10);

        // create a button to continue the current game
        TextButton continueButton = new TextButton("Continue", game.getSkin());
        table.add(continueButton).width(300).row();
        continueButton.addListener(new ChangeListener() {
            @Override
            public void changed(ChangeEvent event, Actor actor) {
                game.goToGame();
            }
        });

        // create a button to continue the current game
        TextButton restartLevelButton = new TextButton("Restart", game.getSkin());
        table.add(restartLevelButton).width(300).row();
        restartLevelButton.addListener(new ChangeListener() {
            @Override
            public void changed(ChangeEvent event, Actor actor) {
                game.setGameState(GameState.NEW_GAME);
                game.goToGame();
            }
        });

        // create a button to initiate a new game
        TextButton newGameButton = new TextButton("New Game", game.getSkin());
        table.add(newGameButton).width(300).row();
        newGameButton.addListener(new ChangeListener() {
            @Override
            public void changed(ChangeEvent event, Actor actor) {
                game.setGameState(GameState.NEW_GAME);
                NativeFileChooserConfiguration conf = FileChooserHelper.mapChooserConfiguration();
                game.getFileChooser().chooseFile(conf, new NativeFileChooserCallback() {
                    @Override
                    public void onFileChosen(FileHandle file) {
                        game.setFileHandle(file);
                        game.goToGame();
                    }

                    @Override
                    public void onCancellation() {

                    }

                    @Override
                    public void onError(Exception exception) {

                    }
                });
            }
        });

        // create a button to initiate a new game
        TextButton goToMenuButton = new TextButton("Go to Menu", game.getSkin());
        table.add(goToMenuButton).width(300).row();
        goToMenuButton.addListener(new ChangeListener() {
            @Override
            public void changed(ChangeEvent event, Actor actor) {
                game.setGameState(GameState.NEW_GAME);
                game.gotoMenu();
            }
        });
    }

    /**
     * Sets up the input processor when the screen is shown.
     * <p>
     * This method is called when this screen becomes the current screen for a {@link MazeRunnerGame}.
     * It sets the input processor to the stage, enabling the screen to receive and handle
     * user input events through the stage's actors.
     * </p>
     */
    @Override
    public void show() {
        Gdx.input.setInputProcessor(stage);
    }

    /**
     * Updates the viewport of the stage when the screen size changes.
     * <p>
     * This method is called when the screen size is changed. It adjusts the viewport of
     * the stage to match the new screen dimensions, ensuring that UI elements are scaled
     * and positioned correctly according to the new size.
     * </p>
     *
     * @param width The new width of the screen.
     * @param height The new height of the screen.
     */
    @Override
    public void resize(int width, int height) {
        stage.getViewport().update(width, height, true);
        Image background = (Image) stage.getRoot().findActor("background");
        if (background != null) {
            background.setSize(stage.getWidth(), stage.getHeight());
        }
    }

    @Override
    public void pause() {

    }

    @Override
    public void resume() {

    }

    @Override
    public void hide() {

    }

    public Stage getStage() {
        return stage;
    }

    /**
     * Disposes of the resources used by the MenuScreen.
     * <p>
     * This method is called when the MenuScreen is no longer needed and is being removed from memory.
     * It ensures that the resources, particularly the stage and the background texture, are properly
     * disposed of. This is important for preventing memory leaks by freeing up the resources that
     * are no longer in use. The method overrides the dispose method of the parent class.
     * </p>
     */
    @Override
    public void dispose() {
        stage.dispose();
    }
}


