package de.tum.cit.ase.maze;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.Screen;
import com.badlogic.gdx.files.FileHandle;
import com.badlogic.gdx.graphics.GL20;
import com.badlogic.gdx.graphics.OrthographicCamera;
import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.graphics.g2d.TextureRegion;
import com.badlogic.gdx.scenes.scene2d.Actor;
import com.badlogic.gdx.scenes.scene2d.Stage;
import com.badlogic.gdx.scenes.scene2d.ui.Image;
import com.badlogic.gdx.scenes.scene2d.ui.Label;
import com.badlogic.gdx.scenes.scene2d.ui.Table;
import com.badlogic.gdx.scenes.scene2d.ui.TextButton;
import com.badlogic.gdx.scenes.scene2d.utils.ChangeListener;
import com.badlogic.gdx.utils.Scaling;
import com.badlogic.gdx.utils.viewport.FillViewport;
import com.badlogic.gdx.utils.viewport.ScreenViewport;
import com.badlogic.gdx.utils.viewport.Viewport;
import games.spooky.gdx.nativefilechooser.NativeFileChooserCallback;
import games.spooky.gdx.nativefilechooser.NativeFileChooserConfiguration;

public class VictoryScreen implements Screen {

    private MazeRunnerGame game;
    private OrthographicCamera camera;
    private Viewport viewport;
    private final Stage stage;
    private Texture backgroundTexture;

    public VictoryScreen(MazeRunnerGame game) {
        this.game = game;
        camera = new OrthographicCamera();
        viewport = new FillViewport(Gdx.graphics.getWidth() * 1.5f, Gdx.graphics.getHeight() * 1.5f, camera);
        stage = new Stage(viewport, game.getBatch());

        // add background image
        addBackgroundImage();

        // add buttons
        addButtons();
    }

    /**
     * Adds a background image to the victory screen.
     * <p>
     * This method loads and sets a background image for the victory screen. The image is obtained
     * from the assets folder ("victory_screen_background.png"). The image is set to fill
     * the entire screen, ensuring that it covers the menu screen's full area.
     * </p>
     */
    private void addBackgroundImage() {
        backgroundTexture = new Texture(Gdx.files.internal("victory_screen_background.png"));      // the image is generated by an AI
        Image background = new Image(backgroundTexture);
        background.setName("background");
        background.setFillParent(true);
        background.setScaling(Scaling.fill);
        stage.addActor(background);
    }

    private void addButtons() {
        // add a table onto stage
        Table table = new Table();
        table.setFillParent(true);
        stage.addActor(table);

        // add a title
        table.add(new Label("Victory!", game.getSkin(), "title")).padBottom(80).row();

        // set default padding for buttons
        table.defaults().padBottom(20);

        // create a button to replay the current map
        TextButton playAgainButton = new TextButton("Play Again", game.getSkin());
        table.add(playAgainButton).width(400).row();
        playAgainButton.addListener(new ChangeListener() {
            @Override
            public void changed(ChangeEvent event, Actor actor) {
                game.goToGame();
            }
        });

        // create a button to choose a new map
        TextButton chooseNewMapButton = new TextButton("Choose New Map", game.getSkin());
        table.add(chooseNewMapButton).width(400).row();
        NativeFileChooserConfiguration conf = FileChooserHelper.mapChooserConfiguration();
        chooseNewMapButton.addListener(new ChangeListener() {
            @Override
            public void changed(ChangeEvent event, Actor actor) {
                game.getFileChooser().chooseFile(conf, new NativeFileChooserCallback() {
                    @Override
                    public void onFileChosen(FileHandle file) {
                        game.setFileHandle(file);
                        game.goToGame();
                    }

                    @Override
                    public void onCancellation() {

                    }

                    @Override
                    public void onError(Exception exception) {

                    }
                });
            }
        });

        // create a button to go back to main menu
        TextButton backToMenuButton = new TextButton("Back to Main Menu", game.getSkin());
        table.add(backToMenuButton).width(400).row();
        backToMenuButton.addListener(new ChangeListener() {
            @Override
            public void changed(ChangeEvent event, Actor actor) {
                game.gotoMenu();
            }
        });
    }


    @Override
    public void render(float delta) {
        Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
        stage.act(Math.min(Gdx.graphics.getDeltaTime(), 1 / 30f));
        stage.draw();
    }

    @Override
    public void show() {
        Gdx.input.setInputProcessor(stage);
    }

    @Override
    public void resize(int width, int height) {
        stage.getViewport().update(width, height, true);
        Image background = (Image) stage.getRoot().findActor("background");
        if (background != null) {
            background.setSize(stage.getWidth(), stage.getHeight());
        }
    }

    @Override
    public void pause() {

    }

    @Override
    public void resume() {

    }

    @Override
    public void hide() {

    }

    public Stage getStage() {
        return stage;
    }

    @Override
    public void dispose() {
        stage.dispose();
    }
}
